# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class NestHoleCrystalEncounter8(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsNestHoleCrystalEncounter8(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NestHoleCrystalEncounter8()
        x.Init(buf, n + offset)
        return x

    # NestHoleCrystalEncounter8
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NestHoleCrystalEncounter8
    def EntryIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def Species(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def AltForm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def DynamaxLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def Field05(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def IsGigantamax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def DropTableID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def BonusTableID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def Field09(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def Field0A(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def Field0B(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def Field0C(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def Field0D(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def Nature(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def IVHp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def IVAtk(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def IVDef(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def IVSpAtk(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def IVSpDef(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def IVSpe(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def Field15(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def Move0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def Move1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def Move2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def Move3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def DynamaxBoost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # NestHoleCrystalEncounter8
    def Field1B(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def Field1C(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def Shield(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def AdditionalMove1Rate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def AdditionalMove1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def AdditionalMove1PP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def AdditionalMove2Rate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def AdditionalMove2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # NestHoleCrystalEncounter8
    def AdditionalMove2PP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def NestHoleCrystalEncounter8Start(builder): builder.StartObject(36)
def NestHoleCrystalEncounter8AddEntryIndex(builder, EntryIndex): builder.PrependUint32Slot(0, EntryIndex, 0)
def NestHoleCrystalEncounter8AddSpecies(builder, Species): builder.PrependUint32Slot(1, Species, 0)
def NestHoleCrystalEncounter8AddAltForm(builder, AltForm): builder.PrependUint32Slot(2, AltForm, 0)
def NestHoleCrystalEncounter8AddLevel(builder, Level): builder.PrependUint32Slot(3, Level, 0)
def NestHoleCrystalEncounter8AddDynamaxLevel(builder, DynamaxLevel): builder.PrependInt8Slot(4, DynamaxLevel, 0)
def NestHoleCrystalEncounter8AddField05(builder, Field05): builder.PrependInt8Slot(5, Field05, 0)
def NestHoleCrystalEncounter8AddIsGigantamax(builder, IsGigantamax): builder.PrependUint32Slot(6, IsGigantamax, 0)
def NestHoleCrystalEncounter8AddDropTableID(builder, DropTableID): builder.PrependUint64Slot(7, DropTableID, 0)
def NestHoleCrystalEncounter8AddBonusTableID(builder, BonusTableID): builder.PrependUint64Slot(8, BonusTableID, 0)
def NestHoleCrystalEncounter8AddField09(builder, Field09): builder.PrependInt8Slot(9, Field09, 0)
def NestHoleCrystalEncounter8AddField0A(builder, Field0A): builder.PrependInt8Slot(10, Field0A, 0)
def NestHoleCrystalEncounter8AddField0B(builder, Field0B): builder.PrependInt8Slot(11, Field0B, 0)
def NestHoleCrystalEncounter8AddField0C(builder, Field0C): builder.PrependInt8Slot(12, Field0C, 0)
def NestHoleCrystalEncounter8AddField0D(builder, Field0D): builder.PrependInt8Slot(13, Field0D, 0)
def NestHoleCrystalEncounter8AddNature(builder, Nature): builder.PrependInt8Slot(14, Nature, 0)
def NestHoleCrystalEncounter8AddIVHp(builder, IVHp): builder.PrependInt16Slot(15, IVHp, 0)
def NestHoleCrystalEncounter8AddIVAtk(builder, IVAtk): builder.PrependInt16Slot(16, IVAtk, 0)
def NestHoleCrystalEncounter8AddIVDef(builder, IVDef): builder.PrependInt16Slot(17, IVDef, 0)
def NestHoleCrystalEncounter8AddIVSpAtk(builder, IVSpAtk): builder.PrependInt16Slot(18, IVSpAtk, 0)
def NestHoleCrystalEncounter8AddIVSpDef(builder, IVSpDef): builder.PrependInt16Slot(19, IVSpDef, 0)
def NestHoleCrystalEncounter8AddIVSpe(builder, IVSpe): builder.PrependInt16Slot(20, IVSpe, 0)
def NestHoleCrystalEncounter8AddField15(builder, Field15): builder.PrependUint32Slot(21, Field15, 0)
def NestHoleCrystalEncounter8AddMove0(builder, Move0): builder.PrependUint32Slot(22, Move0, 0)
def NestHoleCrystalEncounter8AddMove1(builder, Move1): builder.PrependUint32Slot(23, Move1, 0)
def NestHoleCrystalEncounter8AddMove2(builder, Move2): builder.PrependUint32Slot(24, Move2, 0)
def NestHoleCrystalEncounter8AddMove3(builder, Move3): builder.PrependUint32Slot(25, Move3, 0)
def NestHoleCrystalEncounter8AddDynamaxBoost(builder, DynamaxBoost): builder.PrependFloat32Slot(26, DynamaxBoost, 0.0)
def NestHoleCrystalEncounter8AddField1B(builder, Field1B): builder.PrependUint32Slot(27, Field1B, 0)
def NestHoleCrystalEncounter8AddField1C(builder, Field1C): builder.PrependUint32Slot(28, Field1C, 0)
def NestHoleCrystalEncounter8AddShield(builder, Shield): builder.PrependUint32Slot(29, Shield, 0)
def NestHoleCrystalEncounter8AddAdditionalMove1Rate(builder, AdditionalMove1Rate): builder.PrependUint32Slot(30, AdditionalMove1Rate, 0)
def NestHoleCrystalEncounter8AddAdditionalMove1(builder, AdditionalMove1): builder.PrependUint32Slot(31, AdditionalMove1, 0)
def NestHoleCrystalEncounter8AddAdditionalMove1PP(builder, AdditionalMove1PP): builder.PrependUint32Slot(32, AdditionalMove1PP, 0)
def NestHoleCrystalEncounter8AddAdditionalMove2Rate(builder, AdditionalMove2Rate): builder.PrependUint32Slot(33, AdditionalMove2Rate, 0)
def NestHoleCrystalEncounter8AddAdditionalMove2(builder, AdditionalMove2): builder.PrependUint32Slot(34, AdditionalMove2, 0)
def NestHoleCrystalEncounter8AddAdditionalMove2PP(builder, AdditionalMove2PP): builder.PrependUint32Slot(35, AdditionalMove2PP, 0)
def NestHoleCrystalEncounter8End(builder): return builder.EndObject()
