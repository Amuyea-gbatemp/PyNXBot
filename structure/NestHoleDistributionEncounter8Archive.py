# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class NestHoleDistributionEncounter8Archive(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsNestHoleDistributionEncounter8Archive(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NestHoleDistributionEncounter8Archive()
        x.Init(buf, n + offset)
        return x

    # NestHoleDistributionEncounter8Archive
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NestHoleDistributionEncounter8Archive
    def Tables(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from structure.NestHoleDistributionEncounter8Table import NestHoleDistributionEncounter8Table
            obj = NestHoleDistributionEncounter8Table()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NestHoleDistributionEncounter8Archive
    def TablesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NestHoleDistributionEncounter8Archive
    def TablesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def NestHoleDistributionEncounter8ArchiveStart(builder): builder.StartObject(1)
def NestHoleDistributionEncounter8ArchiveAddTables(builder, Tables): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(Tables), 0)
def NestHoleDistributionEncounter8ArchiveStartTablesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NestHoleDistributionEncounter8ArchiveEnd(builder): return builder.EndObject()
