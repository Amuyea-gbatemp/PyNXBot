from structure.ByteStruct import ByteStruct
from enum import Enum

class DenType(Enum):
	EMPTY = 0
	COMMON = 1
	RARE = 2
	COMMON_WISH = 3
	RARE_WISH = 4
	EVENT = 5

class Den(ByteStruct):
	SIZE = 0x18
	LOCALTABLE = None
	EVENTTABLE = None
	def __init__(self,buf):
		self.data = bytearray(Den.SIZE)
		self.data[:] = buf

	def hash(self):
		return self.getulong(0x0)

	def seed(self):
		return self.getulong(0x8)

	def stars(self):
		return self.getbyte(0x10) + 1

	def randroll(self):
		return self.getbyte(0x11)

	def denType(self):
		return DenType(self.getbyte(0x12))

	def flagByte(self):
		return self.getbyte(0x13)

	def isActive(self):
		return self.denType() != DenType.EMPTY

	def isRare(self):
		return self.denType() == DenType.RARE or self.denType() == DenType.RARE_WISH

	def isWishingPiece(self):
		return self.denType() == DenType.COMMON_WISH or self.denType() == DenType.RARE_WISH

	def hasWatts(self):
		return (self.flagByte() & 1) == 0

	def isEvent(self):
		return (self.flagByte() & 2) == 2

	def getSpawn(self,denID,isSword = True):
		gameversion = 1 if isSword else 2
		randroll = self.randroll()
		rank = self.stars() - 1
		if self.isEvent():
			for ii in range(Den.EVENTTABLE.TablesLength()):
				table = Den.EVENTTABLE.Tables(ii)
				if table.GameVersion() == gameversion:
					for jj in range(table.EntriesLength()):
						entry = table.Entries(jj)
						randroll -= entry.Probabilities(rank)
						if randroll < 0:
							return entry
		else:
			denhash = Den.DENHASHES[denID][1 if self.isRare() else 0]
			for ii in range(Den.LOCALTABLE.TablesLength()):
				table = Den.LOCALTABLE.Tables(ii)
				if table.TableID() == denhash and table.GameVersion() == gameversion:
					for jj in range(table.EntriesLength()):
						entry = table.Entries(jj)
						randroll -= entry.Probabilities(rank)
						if randroll < 0:
							return entry

	@staticmethod
	def getCrystalRank(level):
		if 15 <= level and level <= 20:
			return 0
		if 25 <= level and level <= 30:
			return 1
		if 35 <= level and level <= 40:
			return 2
		if 45 <= level and level <= 50:
			return 3
		if 55 <= level and level <= 60:
			return 4
		return -1

	EVENTHASH = 1721953670860364124;
	DENHASHES = [
	    [1675062357515959378, 13439833545771248589],
	    [1676893044376552243, 13440787921864346512],
	    [1676899641446321509, 4973137107049022145],
	    [1676044221399762576, 13438834089701394015],
	    [1676051917981160053, 13438837388236278648],
	    [1676897442423065087, 13440790120887602934],
	    [1676908437539347197, 13440789021375974723],
	    [1676046420423018998, 13438839587259535070],
	    [1676899641446321509, 4973137107049022145],
	    [1677896898492919661, 13439825849189851112],
	    [1677881505330124707, 1677895798981291450],
	    [1677896898492919661, 13439826948701479323],
	    [1676051917981160053, 4973134908025765723],
	    [1677896898492919661, 13439825849189851112],
	    [1676045320911390787, 13438832990189765804],
	    [1676049718957903631, 13438838487747906859],
	    [EVENTHASH, EVENTHASH],  # placeholder
	    [1676048619446275420, 13438843985306047914],
	    [1676908437539347197, 13440789021375974723],
	    [1676899641446321509, 13439823650166594690],
	    [1676899641446321509, 13439823650166594690],
	    [1676055216516044686, 13441642242399277234],
	    [1676055216516044686, 13441642242399277234],
	    [1679871621376808167, 13438843985306047914],
	    [1676048619446275420, 13438843985306047914],
	    [1676055216516044686, 4973136007537393934],
	    [1676895243399808665, 1676891944864924032],
	    [1676907338027718986, 13440787921864346512],
	    [1676056316027672897, 4973136007537393934],
	    [1679872720888436378, 13441636744841136179],
	    [1679872720888436378, 13441636744841136179],
	    [1676050818469531842, 13438837388236278648],
	    [1676046420423018998, 13438842885794419703],
	    [1675061258004331167, 13438834089701394015],
	    [1675057959469446534, 13438845084817676125],
	    [1675056859957818323, 13438840686771163281],
	    [1675061258004331167, 4972148646095449681],
	    [1675056859957818323, 4972140949514052204],
	    [1675055760446190112, 13438839587259535070],
	    [1679872720888436378, 13441636744841136179],
	    [1677880405818496496, 13439824749678222901],
	    [1679872720888436378, 13441636744841136179],
	    [1677880405818496496, 13439824749678222901],
	    [1677880405818496496, 4973141505095534989],
	    [1675055760446190112, 13438839587259535070],
	    [1675060158492702956, 13438832990189765804],
	    [1676898541934693298, 13439824749678222901],
	    [1677894699469663239, 13439829147724735745],
	    [1679873820400064589, 13440789021375974723],
	    [1676894143888180454, 4972147546583821470],
	    [1675059058981074745, 4973140405583906778],
	    [1676056316027672897, 13438843985306047914],
	    [1675062357515959378, 13439833545771248589],
	    [1679873820400064589, 13440789021375974723],
	    [1676051917981160053, 4973134908025765723],
	    [1676050818469531842, 13438837388236278648],
	    [1676891944864924032, 13440791220399231145],
	    [1677895798981291450, 13439825849189851112],
	    [1679873820400064589, 13440794518934115778],
	    [1676046420423018998, 4972146447072193259],
	    [1676044221399762576, 13438834089701394015],
	    [1675065656050844011, 4972145347560565048],
	    [1676049718957903631, 13438842885794419703],
	    [1677895798981291450, 13439825849189851112],
	    [1676045320911390787, 13438832990189765804],
	    [1675057959469446534, 4972142049025680415],
	    [1677892500446406817, 13439830247236363956],
	    [1675060158492702956, 13438832990189765804],
	    [1675064556539215800, 13439831346747992167],
	    [1676895243399808665, 1676891944864924032],
	    [1675063457027587589, 4973133808514137512],
	    [1675063457027587589, 13439833545771248589],
	    [1675061258004331167, 4973133808514137512],
	    [1676055216516044686, 13441642242399277234],
	    [1675056859957818323, 13438840686771163281],
	    [1675055760446190112, 13438839587259535070],
	    [1677889201911522184, 13439830247236363956],
	    [1675064556539215800, 13439831346747992167],
	    [1677881505330124707, 13438842885794419703],
	    [13440791220399231145, 4973139306072278567],
	    [1679871621376808167, 13440795618445743989],
	    [13440791220399231145, 13440793419422487567],
	    [1677895798981291450, 13440798916980628622],
	    [1677893599958035028, 13441641142887649023],
	    [1675057959469446534, 13438845084817676125],
	    [1676896342911436876, 13439823650166594690],
	    [1676898541934693298, 13439828048213107534],
	    [1675065656050844011, 13439832446259620378],
	    [1677891400934778606, 13441640043376020812],
	    [1676897442423065087, 13440790120887602934],
	    [1675060158492702956, 13440792319910859356],
	    [1676898541934693298, 13439824749678222901],
	    [1677891400934778606, 13439830247236363956],
	    [1675064556539215800, 13440800016492256833],
	    [1676896342911436876, 4973138206560650356],
	    [1677894699469663239, 4972151944630334314],
	    [1677893599958035028, 13439829147724735745],
	    [1675064556539215800, 4972150845118706103],
	    [1676056316027672897, 13438843985306047914],
	    [1676894143888180454, 13441643341910905445],
	]


