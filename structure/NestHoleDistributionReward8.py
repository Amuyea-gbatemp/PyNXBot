# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class NestHoleDistributionReward8(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsNestHoleDistributionReward8(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NestHoleDistributionReward8()
        x.Init(buf, n + offset)
        return x

    # NestHoleDistributionReward8
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NestHoleDistributionReward8
    def Value0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # NestHoleDistributionReward8
    def Value1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # NestHoleDistributionReward8
    def Value2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # NestHoleDistributionReward8
    def Value3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # NestHoleDistributionReward8
    def Value4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # NestHoleDistributionReward8
    def ItemID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def NestHoleDistributionReward8Start(builder): builder.StartObject(6)
def NestHoleDistributionReward8AddValue0(builder, Value0): builder.PrependInt8Slot(0, Value0, 0)
def NestHoleDistributionReward8AddValue1(builder, Value1): builder.PrependInt8Slot(1, Value1, 0)
def NestHoleDistributionReward8AddValue2(builder, Value2): builder.PrependInt8Slot(2, Value2, 0)
def NestHoleDistributionReward8AddValue3(builder, Value3): builder.PrependInt8Slot(3, Value3, 0)
def NestHoleDistributionReward8AddValue4(builder, Value4): builder.PrependInt8Slot(4, Value4, 0)
def NestHoleDistributionReward8AddItemID(builder, ItemID): builder.PrependUint16Slot(5, ItemID, 0)
def NestHoleDistributionReward8End(builder): return builder.EndObject()
