# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structure

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EncounterNest8(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEncounterNest8(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EncounterNest8()
        x.Init(buf, n + offset)
        return x

    # EncounterNest8
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EncounterNest8
    def EntryIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EncounterNest8
    def Species(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EncounterNest8
    def AltForm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EncounterNest8
    def LevelTableID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # EncounterNest8
    def Ability(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # EncounterNest8
    def IsGigantamax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EncounterNest8
    def DropTableID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # EncounterNest8
    def BonusTableID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # EncounterNest8
    def Probabilities(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EncounterNest8
    def ProbabilitiesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # EncounterNest8
    def ProbabilitiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EncounterNest8
    def ProbabilitiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # EncounterNest8
    def Gender(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # EncounterNest8
    def FlawlessIVs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def EncounterNest8Start(builder): builder.StartObject(11)
def EncounterNest8AddEntryIndex(builder, EntryIndex): builder.PrependUint32Slot(0, EntryIndex, 0)
def EncounterNest8AddSpecies(builder, Species): builder.PrependUint32Slot(1, Species, 0)
def EncounterNest8AddAltForm(builder, AltForm): builder.PrependUint32Slot(2, AltForm, 0)
def EncounterNest8AddLevelTableID(builder, LevelTableID): builder.PrependUint64Slot(3, LevelTableID, 0)
def EncounterNest8AddAbility(builder, Ability): builder.PrependInt8Slot(4, Ability, 0)
def EncounterNest8AddIsGigantamax(builder, IsGigantamax): builder.PrependBoolSlot(5, IsGigantamax, 0)
def EncounterNest8AddDropTableID(builder, DropTableID): builder.PrependUint64Slot(6, DropTableID, 0)
def EncounterNest8AddBonusTableID(builder, BonusTableID): builder.PrependUint64Slot(7, BonusTableID, 0)
def EncounterNest8AddProbabilities(builder, Probabilities): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(Probabilities), 0)
def EncounterNest8StartProbabilitiesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EncounterNest8AddGender(builder, Gender): builder.PrependInt8Slot(9, Gender, 0)
def EncounterNest8AddFlawlessIVs(builder, FlawlessIVs): builder.PrependInt8Slot(10, FlawlessIVs, 0)
def EncounterNest8End(builder): return builder.EndObject()
