# automatically generated by the FlatBuffers compiler, do not modify

# namespace: structures

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class NestHoleReward8Table(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsNestHoleReward8Table(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NestHoleReward8Table()
        x.Init(buf, n + offset)
        return x

    # NestHoleReward8Table
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NestHoleReward8Table
    def TableID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # NestHoleReward8Table
    def Entries(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from structures.NestHoleReward8 import NestHoleReward8
            obj = NestHoleReward8()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NestHoleReward8Table
    def EntriesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NestHoleReward8Table
    def EntriesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def NestHoleReward8TableStart(builder): builder.StartObject(2)
def NestHoleReward8TableAddTableID(builder, TableID): builder.PrependUint64Slot(0, TableID, 0)
def NestHoleReward8TableAddEntries(builder, Entries): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(Entries), 0)
def NestHoleReward8TableStartEntriesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NestHoleReward8TableEnd(builder): return builder.EndObject()
